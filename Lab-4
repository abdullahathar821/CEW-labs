//Question 1:

#include <stdio.h>
#include <stdlib.h>

struct Contact {
    char name[50];
    char email[50];
    char phone[15];
    struct Contact* next;
};

struct Contact* createContact() {
    struct Contact* newContact = (struct Contact*)malloc(sizeof(struct Contact));
    if (newContact == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }
    newContact->next = NULL;
    return newContact;
}

void addContact(struct Contact** head) {
    struct Contact* newContact = createContact();

    printf("Enter name: ");
    scanf("%s", newContact->name);

    printf("Enter email: ");
    scanf("%s", newContact->email);

    printf("Enter phone: ");
    scanf("%s", newContact->phone);

    newContact->next = *head;
    *head = newContact;

    printf("Contact added successfully!\n");
}

void deleteContact(struct Contact** head, char targetName[]) {
    struct Contact *current = *head, *prev = NULL;

    while (current != NULL && strcmp(current->name, targetName) != 0) {
        prev = current;
        current = current->next;
    }

    if (current == NULL) {
        printf("Contact not found!\n");
        return;
    }

    if (prev == NULL) {
        *head = current->next;
    } else {
        prev->next = current->next;
    }

    free(current);
    printf("Contact deleted successfully!\n");
}

void displayContacts(struct Contact* head) {
    struct Contact* current = head;
    while (current != NULL) {
        printf("Name: %s, Email: %s, Phone: %s\n", current->name, current->email, current->phone);
        current = current->next;
    }
}

void freeContacts(struct Contact* head) {
    struct Contact* current = head;
    while (current != NULL) {
        struct Contact* temp = current;
        current = current->next;
        free(temp);
    }
}

int main() {
    struct Contact* addressBook = NULL;
    int choice;
    char targetName[50];

    do {
        printf("\n1. Add Contact\n2. Delete Contact\n3. Display Contacts\n4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addContact(&addressBook);
                break;
            case 2:
                printf("Enter the name of the contact to delete: ");
                scanf("%s", targetName);
                deleteContact(&addressBook, targetName);
                break;
            case 3:
                displayContacts(addressBook);
                break;
            case 4:
                freeContacts(addressBook);
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }

    } while (choice != 4);

    return 0;
}

//Question 2

#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}


void displayList(struct Node* head) {
    printf("Linked List: ");
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}


struct Node* mergeSortedLists(struct Node* list1, struct Node* list2) {
    struct Node* mergedList = NULL;
    struct Node* temp = NULL;

    while (list1 != NULL && list2 != NULL) {
        if (list1->data < list2->data) {
            if (mergedList == NULL) {
                mergedList = createNode(list1->data);
                temp = mergedList;
            } else {
                temp->next = createNode(list1->data);
                temp = temp->next;
            }
            list1 = list1->next;
        } else {
            if (mergedList == NULL) {
                mergedList = createNode(list2->data);
                temp = mergedList;
            } else {
                temp->next = createNode(list2->data);
                temp = temp->next;
            }
            list2 = list2->next;
        }
    }


    while (list1 != NULL) {
        temp->next = createNode(list1->data);
        temp = temp->next;
        list1 = list1->next;
    }

    while (list2 != NULL) {
        temp->next = createNode(list2->data);
        temp = temp->next;
        list2 = list2->next;
    }

    return mergedList;
}

void freeList(struct Node** head) {
    struct Node* current = *head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }

    *head = NULL;
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;

    // Populate lists (assuming they are sorted)
    insertEnd(&list1, 1);
    insertEnd(&list1, 3);
    insertEnd(&list1, 5);

    insertEnd(&list2, 2);
    insertEnd(&list2, 4);
    insertEnd(&list2, 6);

    printf("List 1:\n");
    displayList(list1);

    printf("List 2:\n");
    displayList(list2);

    struct Node* mergedList = mergeSortedLists(list1, list2);

    printf("Merged List:\n");
    displayList(mergedList);

    // Free the memory allocated for the lists
    freeList(&list1);
    freeList(&list2);
    freeList(&mergedList);

    return 0;
}

//Question 3
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}


void displayList(struct Node* head) {
    printf("Linked List: ");
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

// Function to convert a singly linked list into an array and return it
int* convertListToArray(struct Node* head, int* size) {
    int count = 0;
    struct Node* temp = head;

    // Count the number of nodes
    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    int* array = (int*)malloc(count * sizeof(int));
    if (array == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }

    temp = head;
    for (int i = 0; i < count; i++) {
        array[i] = temp->data;
        temp = temp->next;
    }

    *size = count;
    return array;
}

void freeList(struct Node** head) {
    struct Node* current = *head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }

    *head = NULL;
}

int main() {
    struct Node* linkedList = NULL;


    insertEnd(&linkedList, 1);
    insertEnd(&linkedList, 2);
    insertEnd(&linkedList, 3);

    displayList(linkedList);

 
    int size;
    int* array = convertListToArray(linkedList, &size);

    printf("Array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", array[i]);
    }
    printf("\n");
    freeList(&linkedList);
    free(array);
    return 0;
}

//Question 4
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        exit(1);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

void insertEnd(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newNode;
    }
}

void displayList(struct Node* head) {
    printf("Linked List: ");
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

void removeOddIndices(struct Node** head) {
    struct Node* current = *head;
    struct Node* previous = NULL;
    int index = 0;

    while (current != NULL) {
        if (index % 2 != 0) {
            previous->next = current->next;
            free(current);
            current = previous->next;
        } else {
            previous = current;
            current = current->next;
        }
        index++;
    }
}

void freeList(struct Node** head) {
    struct Node* current = *head;
    struct Node* next;

    while (current != NULL) {
        next = current->next;
        free(current);
        current = next;
    }

    *head = NULL;
}

int main() {
    struct Node* linkedList = NULL;

    insertEnd(&linkedList, 1);
    insertEnd(&linkedList, 2);
    insertEnd(&linkedList, 3);
    insertEnd(&linkedList, 4);
    insertEnd(&linkedList, 5);

    displayList(linkedList);

    removeOddIndices(&linkedList);

    displayList(linkedList);

    freeList(&linkedList);

    return 0;
}
